//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CustomFileGenerators.ObservablePropertyGenerator.
//     Generator Version: 1.0.0.0
//     Runtime Version:4.0.30319.468
//
//     Documentation, Examples, Bug Reports, Community @
//     http://CustomFileGenerators.codeplex.com
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace Namespace1.Tests
{
	partial class TestClass1
	{
		public string Name
		{
			get
			{
				return _name;
			}
			set
			{
				if (_name != value)
				{
					OnBeforeNameValueChanging(value);
					_name = value;
					OnBeforeNameRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.Name);
					OnAfterNameRaisePropertyChanged();
				}
			}
		}

		public DateTime DateOfBirth
		{
			get
			{
				return _dateOfBirth;
			}
			set
			{
				if (_dateOfBirth != value)
				{
					OnBeforeDateOfBirthValueChanging(value);
					_dateOfBirth = value;
					OnBeforeDateOfBirthRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.DateOfBirth);
					OnAfterDateOfBirthRaisePropertyChanged();
				}
			}
		}

		public ObservableCollection<RangeDirection> RangeDirections
		{
			get
			{
				return _rangeDirections;
			}
			set
			{
				if (_rangeDirections != value)
				{
					OnBeforeRangeDirectionsValueChanging(value);
					_rangeDirections = value;
					OnBeforeRangeDirectionsRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.RangeDirections);
					OnAfterRangeDirectionsRaisePropertyChanged();
				}
			}
		}

		public ObservableCollection<State> States
		{
			get
			{
				return _states;
			}
			set
			{
				if (_states != value)
				{
					OnBeforeStatesValueChanging(value);
					_states = value;
					OnBeforeStatesRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.States);
					OnAfterStatesRaisePropertyChanged();
				}
			}
		}

		public ObservableCollection<County> Counties
		{
			get
			{
				return _counties;
			}
			set
			{
				if (_counties != value)
				{
					OnBeforeCountiesValueChanging(value);
					_counties = value;
					OnBeforeCountiesRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.Counties);
					OnAfterCountiesRaisePropertyChanged();
				}
			}
		}

		public ObservableCollection<Country> Countries
		{
			get
			{
				return _countries;
			}
			set
			{
				if (_countries != value)
				{
					OnBeforeCountriesValueChanging(value);
					_countries = value;
					OnBeforeCountriesRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.Countries);
					OnAfterCountriesRaisePropertyChanged();
				}
			}
		}

		public bool IsEmployee
		{
			get
			{
				return _isEmployee;
			}
			set
			{
				if (_isEmployee != value)
				{
					OnBeforeIsEmployeeValueChanging(value);
					_isEmployee = value;
					OnBeforeIsEmployeeRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.IsEmployee);
					OnAfterIsEmployeeRaisePropertyChanged();
				}
			}
		}

		public ObservableCollection<Section> Sections
		{
			get
			{
				return _sections;
			}
			set
			{
				if (_sections != value)
				{
					OnBeforeSectionsValueChanging(value);
					_sections = value;
					OnBeforeSectionsRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.Sections);
					OnAfterSectionsRaisePropertyChanged();
				}
			}
		}

		public ObservableCollection<TownshipDirection> TownshipDirections
		{
			get
			{
				return _townshipDirections;
			}
			set
			{
				if (_townshipDirections != value)
				{
					OnBeforeTownshipDirectionsValueChanging(value);
					_townshipDirections = value;
					OnBeforeTownshipDirectionsRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.TownshipDirections);
					OnAfterTownshipDirectionsRaisePropertyChanged();
				}
			}
		}

		public ObservableCollection<PrincipalMeridian> PrincipalMeridians
		{
			get
			{
				return _principalMeridians;
			}
			set
			{
				if (_principalMeridians != value)
				{
					OnBeforePrincipalMeridiansValueChanging(value);
					_principalMeridians = value;
					OnBeforePrincipalMeridiansRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.PrincipalMeridians);
					OnAfterPrincipalMeridiansRaisePropertyChanged();
				}
			}
		}

		public Collateral SelectedCollateral
		{
			get
			{
				return _selectedCollateral;
			}
			set
			{
				if (_selectedCollateral != value)
				{
					OnBeforeSelectedCollateralValueChanging(value);
					_selectedCollateral = value;
					OnBeforeSelectedCollateralRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.SelectedCollateral);
					OnAfterSelectedCollateralRaisePropertyChanged();
				}
			}
		}

		public int Age
		{
			get
			{
				return _age;
			}
			set
			{
				if (_age != value)
				{
					OnBeforeAgeValueChanging(value);
					_age = value;
					OnBeforeAgeRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.Age);
					OnAfterAgeRaisePropertyChanged();
				}
			}
		}

		public decimal Salary
		{
			get
			{
				return _salary;
			}
			set
			{
				if (_salary != value)
				{
					OnBeforeSalaryValueChanging(value);
					_salary = value;
					OnBeforeSalaryRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.Salary);
					OnAfterSalaryRaisePropertyChanged();
				}
			}
		}

		public DateTime MarriageDate
		{
			get
			{
				return _marriedDate;
			}
			set
			{
				if (_marriedDate != value)
				{
					OnBeforeMarriageDateValueChanging(value);
					_marriedDate = value;
					OnBeforeMarriageDateRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.MarriageDate);
					OnAfterMarriageDateRaisePropertyChanged();
				}
			}
		}

		public byte B
		{
			get
			{
				return _b;
			}
			set
			{
				if (_b != value)
				{
					OnBeforeBValueChanging(value);
					_b = value;
					OnBeforeBRaisePropertyChanged();
					RaisePropertyChanged(TestClass1Properties.B);
					OnAfterBRaisePropertyChanged();
				}
			}
		}

		#region Extensibility Method Definitions
		partial void OnBeforeNameValueChanging(string value);
		partial void OnBeforeNameRaisePropertyChanged();
		partial void OnAfterNameRaisePropertyChanged();
		partial void OnBeforeDateOfBirthValueChanging(DateTime value);
		partial void OnBeforeDateOfBirthRaisePropertyChanged();
		partial void OnAfterDateOfBirthRaisePropertyChanged();
		partial void OnBeforeRangeDirectionsValueChanging(ObservableCollection<RangeDirection> value);
		partial void OnBeforeRangeDirectionsRaisePropertyChanged();
		partial void OnAfterRangeDirectionsRaisePropertyChanged();
		partial void OnBeforeStatesValueChanging(ObservableCollection<State> value);
		partial void OnBeforeStatesRaisePropertyChanged();
		partial void OnAfterStatesRaisePropertyChanged();
		partial void OnBeforeCountiesValueChanging(ObservableCollection<County> value);
		partial void OnBeforeCountiesRaisePropertyChanged();
		partial void OnAfterCountiesRaisePropertyChanged();
		partial void OnBeforeCountriesValueChanging(ObservableCollection<Country> value);
		partial void OnBeforeCountriesRaisePropertyChanged();
		partial void OnAfterCountriesRaisePropertyChanged();
		partial void OnBeforeIsEmployeeValueChanging(bool value);
		partial void OnBeforeIsEmployeeRaisePropertyChanged();
		partial void OnAfterIsEmployeeRaisePropertyChanged();
		partial void OnBeforeSectionsValueChanging(ObservableCollection<Section> value);
		partial void OnBeforeSectionsRaisePropertyChanged();
		partial void OnAfterSectionsRaisePropertyChanged();
		partial void OnBeforeTownshipDirectionsValueChanging(ObservableCollection<TownshipDirection> value);
		partial void OnBeforeTownshipDirectionsRaisePropertyChanged();
		partial void OnAfterTownshipDirectionsRaisePropertyChanged();
		partial void OnBeforePrincipalMeridiansValueChanging(ObservableCollection<PrincipalMeridian> value);
		partial void OnBeforePrincipalMeridiansRaisePropertyChanged();
		partial void OnAfterPrincipalMeridiansRaisePropertyChanged();
		partial void OnBeforeSelectedCollateralValueChanging(Collateral value);
		partial void OnBeforeSelectedCollateralRaisePropertyChanged();
		partial void OnAfterSelectedCollateralRaisePropertyChanged();
		partial void OnBeforeAgeValueChanging(int value);
		partial void OnBeforeAgeRaisePropertyChanged();
		partial void OnAfterAgeRaisePropertyChanged();
		partial void OnBeforeSalaryValueChanging(decimal value);
		partial void OnBeforeSalaryRaisePropertyChanged();
		partial void OnAfterSalaryRaisePropertyChanged();
		partial void OnBeforeMarriageDateValueChanging(DateTime value);
		partial void OnBeforeMarriageDateRaisePropertyChanged();
		partial void OnAfterMarriageDateRaisePropertyChanged();
		partial void OnBeforeBValueChanging(byte value);
		partial void OnBeforeBRaisePropertyChanged();
		partial void OnAfterBRaisePropertyChanged();
		#endregion

		public partial class TestClass1Properties
		{
			public const string Name = "Name";
			public const string DateOfBirth = "DateOfBirth";
			public const string RangeDirections = "RangeDirections";
			public const string States = "States";
			public const string Counties = "Counties";
			public const string Countries = "Countries";
			public const string IsEmployee = "IsEmployee";
			public const string Sections = "Sections";
			public const string TownshipDirections = "TownshipDirections";
			public const string PrincipalMeridians = "PrincipalMeridians";
			public const string SelectedCollateral = "SelectedCollateral";
			public const string Age = "Age";
			public const string Salary = "Salary";
			public const string MarriageDate = "MarriageDate";
			public const string B = "B";
		}
	}
}
